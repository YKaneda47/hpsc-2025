#include <cstdio>
#include <cstdlib>
#include <cmath>

int main() {
  const int N = 16;
  float x[N], y[N], m[N], fx[N], fy[N];
  for(int i=0; i<N; i++) {
    x[i] = drand48();
    y[i] = drand48();
    m[i] = drand48();
    fx[i] = fy[i] = 0;
  }
  for(int i=0; i<N; i++) {
    __m512 xi = _mm512_set1_ps(x[i]);
    __m512 yi = _mm512_set1_ps(y[i]);

    __m512 xj = _mm512_loadu_ps(x);
    __m512 yj = _mm512_loadu_ps(y);
    __m512 mj = _mm512_loadu_ps(m);

    int indices[N];
    for (int k = 0; k < N; ++k) indices[k] = k;
    __m512i idx = _mm512_load_epi32(indices);
    __mmask16 mask = _mm512_cmp_epi32_mask(idx, _mm512_set1_epi32(i), _MM_CMPINT_NE);

    __m512 rx = _mm512_sub_ps(xi, xj);
    __m512 ry = _mm512_sub_ps(yi, yj);
    __m512 r2 = _mm512_add_ps(_mm512_mul_ps(rx, rx), _mm512_mul_ps(ry, ry));

    __m512 rinv = _mm512_rsqrt14_ps(r2);
    __m512 r3inv = _mm512_mul_ps(_mm512_mul_ps(rinv, rinv), rinv);

    __m512 coeff = _mm512_mul_ps(mj, r3inv);

    __m512 fx_vec = _mm512_mul_ps(rx, coeff);
    __m512 fy_vec = _mm512_mul_ps(ry, coeff);

    fx_vec = _mm512_maskz_mov_ps(mask, fx_vec);
    fy_vec = _mm512_maskz_mov_ps(mask, fy_vec);

    float fx_arr[N], fy_arr[N];
    _mm512_store_ps(fx_arr, fx_vec);
    _mm512_store_ps(fy_arr, fy_vec);

    for (int k = 0; k < N; ++k) {
      fx[i] -= fx_arr[k];
      fy[i] -= fy_arr[k];
    }

    printf("%d %g %g\n", i, fx[i], fy[i]);
  }

  return 0;
}

/*
    for(int j=0; j<N; j++) {
      if(i != j) {
        float rx = x[i] - x[j];
        float ry = y[i] - y[j];
        float r = std::sqrt(rx * rx + ry * ry);
        fx[i] -= rx * m[j] / (r * r * r);
        fy[i] -= ry * m[j] / (r * r * r);
      }
    }
    printf("%d %g %g\n",i,fx[i],fy[i]);
  }
}
*/
